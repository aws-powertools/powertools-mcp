name: Release

on:
  workflow_dispatch:
    inputs:
      releaseType:
        description: 'Type of release'
        required: true
        default: 'auto'
        type: 'choice'
        options:
          - auto
          - patch
          - minor
          - major
      version:
        description: 'Version number (for auto-triggered releases)'
        required: false
        type: 'string'

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: 'https://registry.npmjs.org'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 10.8.0
          
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
          
      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
            
      - name: Install dependencies
        run: pnpm install
        
      - name: Lint
        run: pnpm lint
        
      - name: Build
        run: pnpm build
        
      - name: Test
        run: pnpm test:ci
        
      - name: Check for Draft Release
        if: github.event.inputs.version != ''
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ github.event.inputs.version }}"
          echo "Checking for draft release v$VERSION"
          
          # Check if draft release exists
          RELEASE_EXISTS=$(gh release view v$VERSION --json isDraft 2>/dev/null || echo "{}")
          IS_DRAFT=$(echo "$RELEASE_EXISTS" | jq -r '.isDraft // false')
          
          if [ "$IS_DRAFT" != "true" ]; then
            echo "No draft release found for v$VERSION, creating one..."
            gh release create v$VERSION \
              --draft \
              --title "v$VERSION" \
              --notes "Release v$VERSION"
          else
            echo "Draft release v$VERSION found"
          fi
        
      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          if [ "${{ github.event.inputs.releaseType }}" != "auto" ]; then
            # Manual release with specific type
            pnpm release --release-as ${{ github.event.inputs.releaseType }}
          else
            # Auto release (triggered by version-bump workflow)
            pnpm release
          fi
          
      - name: Publish Draft Release
        if: github.event.inputs.version != ''
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ github.event.inputs.version }}"
          echo "Publishing draft release v$VERSION"
          
          # Convert draft to published release
          gh release edit v$VERSION --draft=false